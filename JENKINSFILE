pipeline {
    agent any

    parameters {
        string(name: 'GIT_BRANCH', defaultValue: 'master', description: 'Rama del repositorio a ejecutar el pipeline')
    }

    stages {
        stage('Get Code') {
            steps {
                script {
                    echo "Ejecutando pipeline en la rama: ${params.GIT_BRANCH}"
                    
                    // Clonamos el repositorio
                    git branch: params.GIT_BRANCH, url: 'https://github.com/martaavi/cursoDevops.git'
                    
                    // Si la rama "feature_fix_coverage" no existe, la creamos desde master
                    if (params.GIT_BRANCH == 'master') {
                        sh '''
                            git checkout -b feature_fix_coverage || echo "La rama ya existe"
                            git push origin feature_fix_coverage
                        '''
                    }

                    bat 'dir'
                    echo "Workspace: ${env.WORKSPACE}"
                }
            }
        }

        stage('Unit Tests') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                    bat '''
                        set PYTHONPATH=.
                        python -m pytest --junitxml=result-unit.xml test\\unit
                    '''
                    junit 'result-unit.xml'
                }
            }
        }

        stage('Coverage Analysis') {
            steps {
                bat '''
                    coverage run --branch --source=app --omit=app\\__init__.py,app\\api.py -m pytest test\\unit
                    coverage xml
                '''
                stash includes: 'coverage.xml', name: 'coverage-results'
                
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                    cobertura autoUpdateHealth: false, autoUpdateStability: false, 
                        coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '100, 100, 100', 
                        failUnhealthy: false, failUnstable: false, lineCoverageTargets: '100, 100, 100', 
                        maxNumberOfBuilds: 0, onlyStable: false, zoomCoverageChart: false
                }
            }
        }

        stage('Compare Coverage') {
            when {
                expression { params.GIT_BRANCH == 'feature_fix_coverage' }
            }
            steps {
                echo "Comparando cobertura entre master y feature_fix_coverage..."
                bat '''
                    python compare_coverage.py master coverage.xml
                '''
            }
        }

        stage('Generate Coverage Graph') {
            steps {
                script {
                    echo "Generando gráficas de evolución de cobertura..."
                    cobertura coberturaReportFile: 'coverage.xml'
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
